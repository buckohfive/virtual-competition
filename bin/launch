#!/usr/bin/env bash

set -eu

if which cgcef_verify >/dev/null; then
    IN_VM=1
else
    IN_VM=
fi

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
CHALLENGES="$MYDIR/shared/cgc-challenges"
WEBROOT="$MYDIR/shared/webroot"
LOGROOT="$MYDIR/logs"
ROUNDLEN=${ROUNDLEN-300}
ROUNDS=${ROUNDS-100}
POLLS=${POLLS-10}
CS_LIMIT=${CS_LIMIT-30}
CS_ROUNDS_DURATION=${CS_ROUNDS_DURATION-10}
PORT=${PORT-8888}

if [ ! -d $LOGROOT ]; then
    mkdir $LOGROOT
fi

echo $(date): $0 $@ >> $LOGROOT/launch.log

function require_vm {
    if [ -z "$IN_VM" ]; then
        exec vagrant ssh ti -c "/vagrant/bin/launch $1 $2"
    fi
}

function running {
    if pgrep $1 > /dev/null && [ -e $LOGROOT/${1}.pid ] ; then
        return 0
    else
        return 1
    fi
}

function status {
    if [ -z "$1" ] || [ "$1" = ti-server ]; then
        if running ti-server; then
            echo "ti-server is running with PID `cat $LOGROOT/ti-server.pid`"
        else
            echo "ti-server STOPPED"
        fi
    fi

    if [ -z "$1" ] || [ "$1" = ti-rotate ]; then
        require_vm status ti-rotate
        if running ti-rotate; then
            echo "ti-rotate is running with PID `cat $LOGROOT/ti-rotate.pid`"
        else
            echo "ti-rotate STOPPED"
        fi
    fi
}

function start {
    if [ -z "$1" ] || [ "$1" = ti-server ]; then
        if running ti-server; then
            echo "ti-server already running!"
            exit 1
        fi

        nohup "$MYDIR/bin/ti-server" --cbdir "$CHALLENGES" --webroot "$WEBROOT" \
                           --port $PORT \
                           --username "team-6" --password 9fb864f629eb4502edd795e5b7d5c3a0bac0aa8f56c183e3f795c523c0d4f82f \
                           --debug >$LOGROOT/ti-server.stdout 2>$LOGROOT/ti-server.stderr &
        echo $! > $LOGROOT/ti-server.pid
        echo "ti-server STARTED"
        sleep 1                 # nohup takes time to start
    fi

    if [ -z "$1" ] || [ "$1" = ti-rotate ]; then
        require_vm start ti-rotate
        if running ti-rotate; then
            echo "ti-rotate already running!"
            exit 1
        fi

        rm -rf "$WEBROOT"
        mkdir "$WEBROOT"
        # Note: run only one of these! This is the real round-by-round simulation
        nohup "$MYDIR/bin/ti-rotate" --cbdir "$CHALLENGES" --webroot "$WEBROOT" \
                           --roundlen "$ROUNDLEN" --team 6 --rounds "$ROUNDS" \
                           --polls "$POLLS" \
                           --cs-limit "$CS_LIMIT" --cs-rounds-duration "$CS_ROUNDS_DURATION" \
                           --log $LOGROOT/ti-rotate.log \
                           --debug >$LOGROOT/ti-rotate.stdout 2>$LOGROOT/ti-rotate.stderr &
        echo $! > $LOGROOT/ti-rotate.pid
        echo "ti-rotate STARTED"
    fi

    echo "Launched! For logs and info, run virtualcompetition logs"
}

function stop {
    if [ -z "$1" ] || [ "$1" = ti-server ]; then
        if running ti-server; then
            kill `cat $LOGROOT/ti-server.pid`
            rm $LOGROOT/ti-server.pid
            echo "ti-server STOPPED"
        fi
    fi
    if [ -z "$1" ] || [ "$1" = ti-rotate ]; then
        require_vm stop ti-rotate
        if running ti-rotate; then
            kill `cat $LOGROOT/ti-rotate.pid`
            rm $LOGROOT/ti-rotate.pid
            echo "ti-rotate STOPPED"
        fi
    fi
}

function restart {
    if [ -z "$1" ] || [ "$1" = ti-server ]; then
        stop ti-server
        start ti-server
    fi
    if [ -z "$1" ] || [ "$1" = ti-rotate ]; then
        require_vm restart ti-rotate
        stop ti-rotate
        start ti-rotate
    fi
}

function reset {
    mv /vagrant/shared/cgc-challenges/* $MYPATH/shared/cgc-challenges-unfielded 2>/dev/null
    mv /vagrant/shared/cgc-challenges-spent/* $MYPATH/shared/cgc-challenges-unfielded 2>/dev/null
}

function logs {
    echo $LOGROOT/$1
    if [ -f $LOGROOT/$1 ]; then
        cat $LOGROOT/$1
    else
        echo 'Usage: logs [logfile]'
        echo 'Available log files:'
        ls $LOGROOT | cat
    fi
}

case "${1-help}" in
    start)
        start "${2-}"
        ;;
    stop)
        stop "${2-}"
        ;;
    restart)
        restart "${2-}"
        ;;
    status)
        status "${2-}"
        ;;
    reset)
        reset
        ;;
    logs)
        logs "${2-}"
        ;;
    *)
        echo "Usage: ${BASH_SOURCE[0]} {start|stop|restart|status|reset|logs}"
        ;;
esac
